# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.gm_point import GMPoint
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class TextMessage(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, text_message_id: str=None, information_object_reference_id: str=None, author: str=None, _from: str=None, service_type: str=None, created_at: datetime=None, position: GMPoint=None, subject: str=None, body: str=None):
        """
        TextMessage - a model defined in Swagger

        :param text_message_id: The text_message_id of this TextMessage.
        :type text_message_id: str
        :param information_object_reference_id: The information_object_reference_id of this TextMessage.
        :type information_object_reference_id: str
        :param author: The author of this TextMessage.
        :type author: str
        :param _from: The _from of this TextMessage.
        :type _from: str
        :param service_type: The service_type of this TextMessage.
        :type service_type: str
        :param created_at: The created_at of this TextMessage.
        :type created_at: datetime
        :param position: The position of this TextMessage.
        :type position: GMPoint
        :param subject: The subject of this TextMessage.
        :type subject: str
        :param body: The body of this TextMessage.
        :type body: str
        """
        self.swagger_types = {
            'text_message_id': str,
            'information_object_reference_id': str,
            'author': str,
            '_from': str,
            'service_type': str,
            'created_at': datetime,
            'position': GMPoint,
            'subject': str,
            'body': str
        }

        self.attribute_map = {
            'text_message_id': 'textMessageId',
            'information_object_reference_id': 'informationObjectReferenceId',
            'author': 'author',
            '_from': 'from',
            'service_type': 'serviceType',
            'created_at': 'createdAt',
            'position': 'position',
            'subject': 'subject',
            'body': 'body'
        }

        self._text_message_id = text_message_id
        self._information_object_reference_id = information_object_reference_id
        self._author = author
        self.__from = _from
        self._service_type = service_type
        self._created_at = created_at
        self._position = position
        self._subject = subject
        self._body = body

    @classmethod
    def from_dict(cls, dikt) -> 'TextMessage':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The textMessage of this TextMessage.
        :rtype: TextMessage
        """
        return deserialize_model(dikt, cls)

    @property
    def text_message_id(self) -> str:
        """
        Gets the text_message_id of this TextMessage.

        :return: The text_message_id of this TextMessage.
        :rtype: str
        """
        return self._text_message_id

    @text_message_id.setter
    def text_message_id(self, text_message_id: str):
        """
        Sets the text_message_id of this TextMessage.

        :param text_message_id: The text_message_id of this TextMessage.
        :type text_message_id: str
        """
        if text_message_id is None:
            raise ValueError("Invalid value for `text_message_id`, must not be `None`")

        self._text_message_id = text_message_id

    @property
    def information_object_reference_id(self) -> str:
        """
        Gets the information_object_reference_id of this TextMessage.

        :return: The information_object_reference_id of this TextMessage.
        :rtype: str
        """
        return self._information_object_reference_id

    @information_object_reference_id.setter
    def information_object_reference_id(self, information_object_reference_id: str):
        """
        Sets the information_object_reference_id of this TextMessage.

        :param information_object_reference_id: The information_object_reference_id of this TextMessage.
        :type information_object_reference_id: str
        """

        self._information_object_reference_id = information_object_reference_id

    @property
    def author(self) -> str:
        """
        Gets the author of this TextMessage.

        :return: The author of this TextMessage.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """
        Sets the author of this TextMessage.

        :param author: The author of this TextMessage.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def _from(self) -> str:
        """
        Gets the _from of this TextMessage.

        :return: The _from of this TextMessage.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """
        Sets the _from of this TextMessage.

        :param _from: The _from of this TextMessage.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def service_type(self) -> str:
        """
        Gets the service_type of this TextMessage.

        :return: The service_type of this TextMessage.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type: str):
        """
        Sets the service_type of this TextMessage.

        :param service_type: The service_type of this TextMessage.
        :type service_type: str
        """

        self._service_type = service_type

    @property
    def created_at(self) -> datetime:
        """
        Gets the created_at of this TextMessage.

        :return: The created_at of this TextMessage.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """
        Sets the created_at of this TextMessage.

        :param created_at: The created_at of this TextMessage.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def position(self) -> GMPoint:
        """
        Gets the position of this TextMessage.

        :return: The position of this TextMessage.
        :rtype: GMPoint
        """
        return self._position

    @position.setter
    def position(self, position: GMPoint):
        """
        Sets the position of this TextMessage.

        :param position: The position of this TextMessage.
        :type position: GMPoint
        """

        self._position = position

    @property
    def subject(self) -> str:
        """
        Gets the subject of this TextMessage.

        :return: The subject of this TextMessage.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str):
        """
        Sets the subject of this TextMessage.

        :param subject: The subject of this TextMessage.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def body(self) -> str:
        """
        Gets the body of this TextMessage.

        :return: The body of this TextMessage.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body: str):
        """
        Sets the body of this TextMessage.

        :param body: The body of this TextMessage.
        :type body: str
        """

        self._body = body

