# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.latitude_type import LatitudeType
from swagger_server.models.longitude_type import LongitudeType
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class GMPoint(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, lat: LatitudeType=None, lon: LongitudeType=None):
        """
        GMPoint - a model defined in Swagger

        :param id: The id of this GMPoint.
        :type id: int
        :param lat: The lat of this GMPoint.
        :type lat: LatitudeType
        :param lon: The lon of this GMPoint.
        :type lon: LongitudeType
        """
        self.swagger_types = {
            'id': int,
            'lat': LatitudeType,
            'lon': LongitudeType
        }

        self.attribute_map = {
            'id': 'Id',
            'lat': 'lat',
            'lon': 'lon'
        }

        self._id = id
        self._lat = lat
        self._lon = lon

    @classmethod
    def from_dict(cls, dikt) -> 'GMPoint':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GM_Point of this GMPoint.
        :rtype: GMPoint
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this GMPoint.

        :return: The id of this GMPoint.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this GMPoint.

        :param id: The id of this GMPoint.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def lat(self) -> LatitudeType:
        """
        Gets the lat of this GMPoint.

        :return: The lat of this GMPoint.
        :rtype: LatitudeType
        """
        return self._lat

    @lat.setter
    def lat(self, lat: LatitudeType):
        """
        Sets the lat of this GMPoint.

        :param lat: The lat of this GMPoint.
        :type lat: LatitudeType
        """

        self._lat = lat

    @property
    def lon(self) -> LongitudeType:
        """
        Gets the lon of this GMPoint.

        :return: The lon of this GMPoint.
        :rtype: LongitudeType
        """
        return self._lon

    @lon.setter
    def lon(self, lon: LongitudeType):
        """
        Sets the lon of this GMPoint.

        :param lon: The lon of this GMPoint.
        :type lon: LongitudeType
        """

        self._lon = lon

