# coding: utf-8

"""
    STM Voyage Information Service SeaSWIM API

    Voyage Information Service API facing SeaSWIM through SSC exposing interfaces to SeaSWIM stakeholders

    OpenAPI spec version: 1.0.0
    Contact: per.lofbom@sjofartsverket.se
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetVPResponseObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, last_interaction_time=None, voyage_plan=None):
        """
        GetVPResponseObject - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'last_interaction_time': 'datetime',
            'voyage_plan': 'list[VoyagePlan]'
        }

        self.attribute_map = {
            'last_interaction_time': 'lastInteractionTime',
            'voyage_plan': 'voyagePlan'
        }

        self._last_interaction_time = last_interaction_time
        self._voyage_plan = voyage_plan

    @property
    def last_interaction_time(self):
        """
        Gets the last_interaction_time of this GetVPResponseObject.

        :return: The last_interaction_time of this GetVPResponseObject.
        :rtype: datetime
        """
        return self._last_interaction_time

    @last_interaction_time.setter
    def last_interaction_time(self, last_interaction_time):
        """
        Sets the last_interaction_time of this GetVPResponseObject.

        :param last_interaction_time: The last_interaction_time of this GetVPResponseObject.
        :type: datetime
        """
        if last_interaction_time is None:
            raise ValueError("Invalid value for `last_interaction_time`, must not be `None`")

        self._last_interaction_time = last_interaction_time

    @property
    def voyage_plan(self):
        """
        Gets the voyage_plan of this GetVPResponseObject.

        :return: The voyage_plan of this GetVPResponseObject.
        :rtype: list[VoyagePlan]
        """
        return self._voyage_plan

    @voyage_plan.setter
    def voyage_plan(self, voyage_plan):
        """
        Sets the voyage_plan of this GetVPResponseObject.

        :param voyage_plan: The voyage_plan of this GetVPResponseObject.
        :type: list[VoyagePlan]
        """

        self._voyage_plan = voyage_plan

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
