# coding: utf-8

"""
    STM Voyage Information Service SeaSWIM API

    Voyage Information Service API facing SeaSWIM through SSC exposing interfaces to SeaSWIM stakeholders

    OpenAPI spec version: 1.0.0
    Contact: per.lofbom@sjofartsverket.se
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def acknowledgement(self, delivery_ack, **kwargs):
        """
        Endpoint for receipt of acknowledgements
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.acknowledgement(delivery_ack, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeliveryAck delivery_ack: Acknowledgement  (required)
        :return: ResponseObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.acknowledgement_with_http_info(delivery_ack, **kwargs)
        else:
            (data) = self.acknowledgement_with_http_info(delivery_ack, **kwargs)
            return data

    def acknowledgement_with_http_info(self, delivery_ack, **kwargs):
        """
        Endpoint for receipt of acknowledgements
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.acknowledgement_with_http_info(delivery_ack, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeliveryAck delivery_ack: Acknowledgement  (required)
        :return: ResponseObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delivery_ack']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method acknowledgement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delivery_ack' is set
        if ('delivery_ack' not in params) or (params['delivery_ack'] is None):
            raise ValueError("Missing the required parameter `delivery_ack` when calling `acknowledgement`")


        collection_formats = {}

        resource_path = '/acknowledgement'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delivery_ack' in params:
            body_params = params['delivery_ack']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResponseObj',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_voyage_plans(self, **kwargs):
        """
        Returns active VoyagePlans
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_voyage_plans(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str uvid: Unique identity (URN) of a voyageplan
        :param str route_status: Status of a route for a voyageplan: 1-Original   2-Planned_for_voyage    3-Optimized 4-Cross_Checked 5-Safety_Checked    6-Approved  7-Used_for_monitoring   8-Inactive
        :return: GetVPResponseObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_voyage_plans_with_http_info(**kwargs)
        else:
            (data) = self.get_voyage_plans_with_http_info(**kwargs)
            return data

    def get_voyage_plans_with_http_info(self, **kwargs):
        """
        Returns active VoyagePlans
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_voyage_plans_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str uvid: Unique identity (URN) of a voyageplan
        :param str route_status: Status of a route for a voyageplan: 1-Original   2-Planned_for_voyage    3-Optimized 4-Cross_Checked 5-Safety_Checked    6-Approved  7-Used_for_monitoring   8-Inactive
        :return: GetVPResponseObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uvid', 'route_status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_voyage_plans" % key
                )
            params[key] = val
        del params['kwargs']

        if 'uvid' in params and not re.search('urn:mrn:', params['uvid']):
            raise ValueError("Invalid value for parameter `uvid` when calling `get_voyage_plans`, must conform to the pattern `/urn:mrn:/`")

        collection_formats = {}

        resource_path = '/voyagePlans'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'uvid' in params:
            query_params['uvid'] = params['uvid']
        if 'route_status' in params:
            query_params['routeStatus'] = params['route_status']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetVPResponseObject',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_voyage_plan_subscription(self, callback_endpoint, **kwargs):
        """
        Remove subscription for active Voyage Plan from other services i.e. Enhanced Monitoring
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_voyage_plan_subscription(callback_endpoint, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str callback_endpoint: An endpoint (URI) specifying the address where the subscribed data is to be posted (required)
        :param str uvid: Unique identity (URN) of a voyageplan
        :return: ResponseObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_voyage_plan_subscription_with_http_info(callback_endpoint, **kwargs)
        else:
            (data) = self.remove_voyage_plan_subscription_with_http_info(callback_endpoint, **kwargs)
            return data

    def remove_voyage_plan_subscription_with_http_info(self, callback_endpoint, **kwargs):
        """
        Remove subscription for active Voyage Plan from other services i.e. Enhanced Monitoring
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_voyage_plan_subscription_with_http_info(callback_endpoint, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str callback_endpoint: An endpoint (URI) specifying the address where the subscribed data is to be posted (required)
        :param str uvid: Unique identity (URN) of a voyageplan
        :return: ResponseObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['callback_endpoint', 'uvid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_voyage_plan_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'callback_endpoint' is set
        if ('callback_endpoint' not in params) or (params['callback_endpoint'] is None):
            raise ValueError("Missing the required parameter `callback_endpoint` when calling `remove_voyage_plan_subscription`")

        if 'uvid' in params and not re.search('urn:mrn:', params['uvid']):
            raise ValueError("Invalid value for parameter `uvid` when calling `remove_voyage_plan_subscription`, must conform to the pattern `/urn:mrn:/`")

        collection_formats = {}

        resource_path = '/voyagePlans/subscription'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'callback_endpoint' in params:
            query_params['callbackEndpoint'] = params['callback_endpoint']
        if 'uvid' in params:
            query_params['uvid'] = params['uvid']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResponseObj',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def subscribe_to_voyage_plan(self, callback_endpoint, **kwargs):
        """
        Request subscription for active Voyage Plan from other services i.e. Enhanced Monitoring
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_to_voyage_plan(callback_endpoint, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str callback_endpoint: An endpoint (URI) specifying the address where the subscribed data is to be posted (required)
        :param str uvid: Unique identity (URN) of a voyageplan
        :return: ResponseObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.subscribe_to_voyage_plan_with_http_info(callback_endpoint, **kwargs)
        else:
            (data) = self.subscribe_to_voyage_plan_with_http_info(callback_endpoint, **kwargs)
            return data

    def subscribe_to_voyage_plan_with_http_info(self, callback_endpoint, **kwargs):
        """
        Request subscription for active Voyage Plan from other services i.e. Enhanced Monitoring
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_to_voyage_plan_with_http_info(callback_endpoint, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str callback_endpoint: An endpoint (URI) specifying the address where the subscribed data is to be posted (required)
        :param str uvid: Unique identity (URN) of a voyageplan
        :return: ResponseObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['callback_endpoint', 'uvid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_to_voyage_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'callback_endpoint' is set
        if ('callback_endpoint' not in params) or (params['callback_endpoint'] is None):
            raise ValueError("Missing the required parameter `callback_endpoint` when calling `subscribe_to_voyage_plan`")

        if 'uvid' in params and not re.search('urn:mrn:', params['uvid']):
            raise ValueError("Invalid value for parameter `uvid` when calling `subscribe_to_voyage_plan`, must conform to the pattern `/urn:mrn:/`")

        collection_formats = {}

        resource_path = '/voyagePlans/subscription'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'callback_endpoint' in params:
            query_params['callbackEndpoint'] = params['callback_endpoint']
        if 'uvid' in params:
            query_params['uvid'] = params['uvid']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResponseObj',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_area(self, area, **kwargs):
        """
        Upload area message to VIS from other services i.e. Route Check service as an informational message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_area(area, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param S124DataSet area: Area message to add to VIS message db for delivery to STM Onboard system as additional information (required)
        :param str delivery_ack_end_point: Acknowledgement required, optionally an URL could be provided to send acknowledgment.
        :return: ResponseObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_area_with_http_info(area, **kwargs)
        else:
            (data) = self.upload_area_with_http_info(area, **kwargs)
            return data

    def upload_area_with_http_info(self, area, **kwargs):
        """
        Upload area message to VIS from other services i.e. Route Check service as an informational message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_area_with_http_info(area, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param S124DataSet area: Area message to add to VIS message db for delivery to STM Onboard system as additional information (required)
        :param str delivery_ack_end_point: Acknowledgement required, optionally an URL could be provided to send acknowledgment.
        :return: ResponseObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area', 'delivery_ack_end_point']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_area" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area' is set
        if ('area' not in params) or (params['area'] is None):
            raise ValueError("Missing the required parameter `area` when calling `upload_area`")


        collection_formats = {}

        resource_path = '/area'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'delivery_ack_end_point' in params:
            query_params['deliveryAckEndPoint'] = params['delivery_ack_end_point']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'area' in params:
            body_params = params['area']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResponseObj',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_text_message(self, text_message_object, **kwargs):
        """
        Upload text message to VIS from other services i.e. Route Optimization service.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_text_message(text_message_object, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TextMessageObject text_message_object: Text message to add to VIS message db for delivery to STM Onboard system (required)
        :param str delivery_ack_end_point: Acknowledgement required, optionally an URL could be provided to send acknowledgment.
        :return: ResponseObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_text_message_with_http_info(text_message_object, **kwargs)
        else:
            (data) = self.upload_text_message_with_http_info(text_message_object, **kwargs)
            return data

    def upload_text_message_with_http_info(self, text_message_object, **kwargs):
        """
        Upload text message to VIS from other services i.e. Route Optimization service.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_text_message_with_http_info(text_message_object, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TextMessageObject text_message_object: Text message to add to VIS message db for delivery to STM Onboard system (required)
        :param str delivery_ack_end_point: Acknowledgement required, optionally an URL could be provided to send acknowledgment.
        :return: ResponseObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text_message_object', 'delivery_ack_end_point']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_text_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'text_message_object' is set
        if ('text_message_object' not in params) or (params['text_message_object'] is None):
            raise ValueError("Missing the required parameter `text_message_object` when calling `upload_text_message`")


        collection_formats = {}

        resource_path = '/textMessage'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'delivery_ack_end_point' in params:
            query_params['deliveryAckEndPoint'] = params['delivery_ack_end_point']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'text_message_object' in params:
            body_params = params['text_message_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResponseObj',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_voyage_plan(self, uvid, voyage_plan, **kwargs):
        """
        Upload VoyagePlan to VIS from other services i.e. Route Optimization service.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_voyage_plan(uvid, voyage_plan, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str uvid: UVID of VoyagePlan to upload. (required)
        :param VoyagePlan voyage_plan: Voyage Plan to add to VIS message db (required)
        :param str delivery_ack_end_point: Acknowledgement required, optionally an URL could be provided to send acknowledgment.
        :return: ResponseObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_voyage_plan_with_http_info(uvid, voyage_plan, **kwargs)
        else:
            (data) = self.upload_voyage_plan_with_http_info(uvid, voyage_plan, **kwargs)
            return data

    def upload_voyage_plan_with_http_info(self, uvid, voyage_plan, **kwargs):
        """
        Upload VoyagePlan to VIS from other services i.e. Route Optimization service.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_voyage_plan_with_http_info(uvid, voyage_plan, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str uvid: UVID of VoyagePlan to upload. (required)
        :param VoyagePlan voyage_plan: Voyage Plan to add to VIS message db (required)
        :param str delivery_ack_end_point: Acknowledgement required, optionally an URL could be provided to send acknowledgment.
        :return: ResponseObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uvid', 'voyage_plan', 'delivery_ack_end_point']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_voyage_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uvid' is set
        if ('uvid' not in params) or (params['uvid'] is None):
            raise ValueError("Missing the required parameter `uvid` when calling `upload_voyage_plan`")
        # verify the required parameter 'voyage_plan' is set
        if ('voyage_plan' not in params) or (params['voyage_plan'] is None):
            raise ValueError("Missing the required parameter `voyage_plan` when calling `upload_voyage_plan`")

        if 'uvid' in params and not re.search('urn:mrn:', params['uvid']):
            raise ValueError("Invalid value for parameter `uvid` when calling `upload_voyage_plan`, must conform to the pattern `/urn:mrn:/`")

        collection_formats = {}

        resource_path = '/voyagePlans'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'uvid' in params:
            query_params['uvid'] = params['uvid']
        if 'delivery_ack_end_point' in params:
            query_params['deliveryAckEndPoint'] = params['delivery_ack_end_point']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'voyage_plan' in params:
            body_params = params['voyage_plan']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json;charset=UTF-8'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResponseObj',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
